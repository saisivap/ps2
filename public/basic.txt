use ps2;

####### 7 .Creating a db and it can also load a data from text file(basic.txt)

create table my_stock(
	symbol varchar(20) not null,
    n_shares integer not null,
    date_acquired date not null
);
LOAD DATA local infile '/home/paruchuri/Desktop/basic.txt' INTO TABLE my_stock;
select * from my_stock;


####### 8 .creating a table_stocks and filling with current date and norminal prices
create table stock_prices(
	symbol varchar(20) not null,
    quote_date TIMESTAMP DEFAULT NOW() ,
    price float(16) default 31.415
);

insert into stock_prices ( SELECT symbol,current_date(),31.415 as price from my_stock);

(or)

#creating a table_stocks and filling with current date and norminal prices

create table s_p( SELECT symbol,current_date(),31.415 as price from my_stock);



#Creating a db of newly_acquired_stocks

create table newly_acquired_stocks (
symbol varchar(20) not null,
n_shares integer not null,
date_acquired date not null
);

#here we can copy the whole data present in the my_stock to newly_acqired_stocks

INSERT INTO newly_acquired_stocks (symbol,n_shares,date_acquired) select symbol,n_shares,date_acquired from my_stock;




######### 9.JOIN: With a single SQL statement JOINing my stocks and stock prices, produce a report showing
symbol, number of shares, price per share, and current value.

select ms.symbol,ms.n_shares,sp.price,(ms.n_shares*sp.price) as current_value
from my_stock ms
inner join stock_prices sp
on ms.symbol=sp.symbol



#### 10.OUTER JOIN: Insert a row into my stocks. Rerun your query from the previous exercise. Notice that
your new stock does not appear in the report. This is because you’ve JOINed them with the constraint
that the symbol appear in both tables. Modify your statement to use an OUTER JOIN instead so
that you’ll get a complete report of all your stocks, but won’t get price information if none is available.


insert into my_stock values("JK103",2,"1998-11-15");
SELECT ms.symbol,ms.n_shares,sp.price,(ms.n_shares*sp.price) as current_value
FROM my_stock ms
Left JOIN stock_prices sp
ON ms.symbol=sp.symbol
union
SELECT ms.symbol,ms.n_shares,sp.price,(ms.n_shares*sp.price) as current_value
FROM my_stock ms
right JOIN stock_prices sp ON ms.symbol=sp.symbol
where sp.price IS null;



#####11


CREATE FUNCTION return_stock_value(symbol varchar)
returns           integer AS $$
DECLARE character char;
ascii_value       int;
begin
  ascii_value = 0;
  for i IN 1..length(symbol)
  loop
	character = substring(symbol FROM i FOR 1);
  	ascii_value = ascii_value + ascii(character);
  end loop;
  return ascii_value;
end;
$$ language plpgsql;


UPDATE stock_prices
SET    price = return_stock_value(symbol)
WHERE  symbol IN (SELECT symbol
                  FROM   my_stock);

CREATE OR REPLACE FUNCTION return_portfolio()
returns TABLE(symbol varchar(20), acquired date, price_per_share decimal,current_value decimal) AS $$
BEGIN
  RETURN query
  SELECT ms.symbol,ms.n_shares,sp.price,(ms.n_shares*sp.price) as current_value
	FROM my_stock ms
	Left JOIN stock_prices sp
	ON ms.symbol=sp.symbol
	union
  SELECT ms.symbol,ms.n_shares,sp.price,(ms.n_shares*sp.price) as current_value
	FROM my_stock ms
	right JOIN stock_prices sp ON ms.symbol=sp.symbol
	where sp.price IS null;
	END
$$ language plpgsql;

CREATE OR REPLACE FUNCTION value_portfolio()
RETURNS void AS $$

    DECLARE v_id varchar(10);
    DECLARE v_price float;
    DECLARE v_num_shares integer;
    DECLARE v_total_price float;
    DECLARE cx CURSOR FOR SELECT a.symbol,
       a.n_shares,
       b.price,
       (a.n_shares * b.price) AS current_value
FROM   my_stocks AS a,
       stock_prices AS b
WHERE  a.symbol = b.symbol;


  BEGIN
    OPEN cx;
    -- fetch each record
    LOOP
    FETCH cx INTO v_id, v_price, v_num_shares, v_total_price ;
    EXIT WHEN NOT FOUND;
    RAISE NOTICE 'Stock: %, Price: %, Number of Shares: %, Total Price: %', v_id, v_price, v_num_shares, v_total_price ;

    END LOOP;
    CLOSE cx;
  END;
  $$ LANGUAGE plpgsql;




########12




INSERT INTO my_stocks
SELECT M.symbol,
       M.n_shares,
       CURRENT_DATE AS date_acquired
FROM   stock_prices S,
       my_stock M
WHERE  S.symbol = M.symbol
       AND S.price > (SELECT Avg(price) FROM stock_prices);


SELECT symbol,
       Sum(n_shares) AS total_shares
FROM   my_stock
GROUP  BY symbol;

SELECT M.symbol,
       Sum(M.n_shares * S.price) AS total_value
FROM   my_stock M
       INNER JOIN stock_prices S
               ON S.symbol = M.symbol
GROUP  BY M.symbol;

SELECT M.symbol,
       Sum(M.n_shares) AS total_shares,
       Sum(M.n_shares * S.price) AS total_value
FROM   my_stock M
       INNER JOIN stock_prices S
               ON S.symbol = M.symbol
GROUP  BY M.symbol
HAVING COUNT(M.symbol) >= 2;





